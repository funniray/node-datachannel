name: Build - Win - Arm64

on:
  workflow_dispatch:
  # push:
  #   tags:
  #     - v*

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  build-windows-arm64:
    runs-on: windows-2022
    strategy:
      matrix:
        node-version: [18]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Set Up MSVC for ARM64 Cross Compilation
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64_arm64  # Sets up cross-compilation from x64 to ARM64

      - name: Add arguments required for openssl on arm
        run: |
          echo "Appending custom c_flags to $Env:VCPKG_INSTALLATION_ROOT\triplets\community\arm64-windows-static.cmake"
          echo "set(VCPKG_C_FLAGS `"-DNO_INTERLOCKEDOR64`")`nset(VCPKG_CXX_FLAGS `"-DNO_INTERLOCKEDOR64`")" | out-file "$Env:VCPKG_INSTALLATION_ROOT\triplets\community\arm64-windows-static.cmake" -append -Encoding utf8
        shell: pwsh

      - name: Install OpenSSL (Static) for Windows ARM64
        run: |
          %VCPKG_INSTALLATION_ROOT%\vcpkg install openssl:arm64-windows-static
        shell: cmd

      - name: Build
        run: |
          npm install --ignore-scripts
          node_modules/.bin/cmake-js build -A arm64 -a arm64 -G Ninja --CDCMAKE_TOOLCHAIN_FILE=%VCPKG_INSTALLATION_ROOT%\scripts\buildsystems\vcpkg.cmake --CDVCPKG_TARGET_TRIPLET=arm64-windows-static
#          node_modules/.bin/prebuild -r napi --backend cmake-js --arch arm64 --upload -u ${{ secrets.GITHUB_TOKEN }} -- --CDCMAKE_TOOLCHAIN_FILE=%VCPKG_INSTALLATION_ROOT%\scripts\buildsystems\vcpkg.cmake --CDVCPKG_TARGET_TRIPLET=arm64-windows-static
        shell: cmd


      - uses: actions/upload-artifact@v4
        with:
          name: win-arm64
          path: build/Release/*

      # - name: Upload
      #   run: node_modules/.bin/prebuild -r napi --upload -u ${{ secrets.GITHUB_TOKEN }}
      #   env:
      #     CI: true
